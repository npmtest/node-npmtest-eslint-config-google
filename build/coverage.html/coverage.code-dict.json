{"/home/travis/build/npmtest/node-npmtest-eslint-config-google/test.js":"/* istanbul instrument in package npmtest_eslint_config_google */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-config-google/lib.npmtest_eslint_config_google.js":"/* istanbul instrument in package npmtest_eslint_config_google */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_config_google = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_config_google = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-config-google/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-config-google && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_config_google */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_config_google\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_config_google.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_config_google.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_config_google.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_config_google.__dirname + '/lib.npmtest_eslint_config_google.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-config-google/node_modules/eslint-config-google/index.js":"/**\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nmodule.exports = {\n  rules: {\n    // The rules below are listed in the order they appear on the eslint\n    // rules page. All rules are listed to make it easier to keep in sync\n    // as new ESLint rules are added.\n    // http://eslint.org/docs/rules/\n    // - Rules in the `eslint:recommended` ruleset that aren't specifically\n    //   mentioned by the google styleguide are listed but commented out (so\n    //   they don't override a base ruleset).\n    // - Rules that are recommended but contradict the Google styleguide\n    //   are explicitely set to the Google styleguide value.\n\n    // Possible Errors\n    // http://eslint.org/docs/rules/#possible-errors\n    // ---------------------------------------------\n    'no-cond-assign': 0, // eslint:recommended\n    // 'no-console': 2, // eslint:recommended\n    // 'no-constant-condition': 2, // eslint:recommended\n    // 'no-control-regex': 2, // eslint:recommended\n    // 'no-debugger': 2, // eslint:recommended\n    // 'no-dupe-args': 2, // eslint:recommended\n    // 'no-dupe-keys': 2, // eslint:recommended\n    // 'no-duplicate-case': 2, // eslint:recommended\n    // 'no-empty-character-class': 2, // eslint:recommended\n    // 'no-empty': 2, // eslint:recommended\n    // 'no-ex-assign': 2, // eslint:recommended\n    // 'no-extra-boolean-cast': 2, // eslint:recommended\n    // 'no-extra-parens': 0,\n    // 'no-extra-semi': 2, // eslint:recommended\n    // 'no-func-assign': 2, // eslint:recommended\n    // 'no-inner-declarations': 2, // eslint:recommended\n    // 'no-invalid-regexp': 2, // eslint:recommended\n    'no-irregular-whitespace': 2, // eslint:recommended\n    // 'no-obj-calls': 2, // eslint:recommended\n    // 'no-prototype-builtins': 0,\n    // 'no-regex-spaces': 2, // eslint:recommended\n    // 'no-sparse-arrays': 2, // eslint:recommended\n    // 'no-template-curly-in-string': 0,\n    'no-unexpected-multiline': 2, // eslint:recommended\n    // 'no-unreachable': 2, // eslint:recommended\n    // 'no-unsafe-finally': 2, // eslint:recommended\n    // 'no-unsafe-negation': 0,\n    // 'use-isnan': 2 // eslint:recommended\n    'valid-jsdoc': [2, {\n      requireParamDescription: false,\n      requireReturnDescription: false,\n      requireReturn: false,\n      prefer: {returns: 'return'},\n    }],\n    // 'valid-typeof': 2 // eslint:recommended\n\n\n    // Best Practices\n    // http://eslint.org/docs/rules/#best-practices\n    // --------------------------------------------\n\n    // 'accessor-pairs': 0,\n    // 'array-callback-return': 0,\n    // 'block-scoped-var': 0,\n    // 'class-methods-use-this': 0,\n    // 'complexity': 0,\n    // 'consistent-return': 0\n    // 'curly': 0, // TODO(philipwalton): add an option to enforce braces with\n                   // the exception of simple, single-line if statements.\n    // 'default-case': 0,\n    // 'dot-location': 0,\n    // 'dot-notation': 0,\n    // 'eqeqeq': 0,\n    'guard-for-in': 2,\n    // 'no-alert': 0,\n    'no-caller': 2,\n    // 'no-case-declarations': 2, // eslint:recommended\n    // 'no-div-regex': 0,\n    // 'no-else-return': 0,\n    // 'no-empty-function': 0,\n    // 'no-empty-pattern': 2, // eslint:recommended\n    // 'no-eq-null': 0,\n    // 'no-eval': 0,\n    'no-extend-native': 2,\n    'no-extra-bind': 2,\n    // 'no-extra-label': 0,\n    // 'no-fallthrough': 2, // eslint:recommended\n    // 'no-floating-decimal': 0,\n    // 'no-global-assign': 0,\n    // 'no-implicit-coercion': 0,\n    // 'no-implicit-globals': 0,\n    // 'no-implied-eval': 0,\n    'no-invalid-this': 2,\n    // 'no-iterator': 0,\n    // 'no-labels': 0,\n    // 'no-lone-blocks': 0,\n    // 'no-loop-func': 0,\n    // 'no-magic-numbers': 0,\n    'no-multi-spaces': 2,\n    'no-multi-str': 2,\n    // 'no-new-func': 0,\n    'no-new-wrappers': 2,\n    // 'no-new': 0,\n    // 'no-octal-escape': 0,\n    // 'no-octal': 2, // eslint:recommended\n    // 'no-param-reassign': 0,\n    // 'no-proto': 0,\n    // 'no-redeclare': 2, // eslint:recommended\n    // 'no-return-assign': 0,\n    // 'no-script-url': 0,\n    // 'no-self-assign': 2, // eslint:recommended\n    // 'no-self-compare': 0,\n    // 'no-sequences': 0,\n    'no-throw-literal': 2, // eslint:recommended\n    // 'no-unmodified-loop-condition': 0,\n    // 'no-unused-expressions': 0,\n    // 'no-unused-labels': 2, // eslint:recommended\n    // 'no-useless-call': 0,\n    // 'no-useless-concat': 0,\n    // 'no-useless-escape': 0,\n    // 'no-void': 0,\n    // 'no-warning-comments': 0,\n    'no-with': 2,\n    // 'radix': 0,\n    // 'vars-on-top': 0,\n    // 'wrap-iife': 0,\n    // 'yoda': 0,\n\n    // Strict Mode\n    // http://eslint.org/docs/rules/#strict-mode\n    // -----------------------------------------\n    // 'script': 0,\n\n    // Variables\n    // http://eslint.org/docs/rules/#variables\n    // ---------------------------------------\n    // 'init-declarations': 0,\n    // 'no-catch-shadow': 0,\n    // 'no-delete-var': 2, // eslint:recommended\n    // 'no-label-var': 0,\n    // 'no-restricted-globals': 0,\n    // 'no-shadow-restricted-names': 0,\n    // 'no-shadow': 0,\n    // 'no-undef-init': 0,\n    // 'no-undef': 2, // eslint:recommended\n    // 'no-undefined': 0,\n    'no-unused-vars': [2, {args: 'none'}], // eslint:recommended\n    // 'no-use-before-define': 0,\n\n    // Node.js and CommonJS\n    // http://eslint.org/docs/rules/#nodejs-and-commonjs\n    // -------------------------------------------------\n    // 'callback-return': 0,\n    // 'global-require': 0,\n    // 'handle-callback-err': 0,\n    // 'no-mixed-requires': 0,\n    // 'no-new-require': 0,\n    // 'no-path-concat': 0,\n    // 'no-process-env': 0,\n    // 'no-process-exit': 0,\n    // 'no-restricted-modules': 0,\n    // 'no-restricted-properties': 0,\n    // 'no-sync': 0,\n\n    // Stylistic Issues\n    // http://eslint.org/docs/rules/#stylistic-issues\n    // ----------------------------------------------\n    'array-bracket-spacing': [2, 'never'],\n    // 'block-spacing': 0,\n    'brace-style': 2,\n    'camelcase': [2, {properties: 'never'}],\n    'comma-dangle': [2, 'always-multiline'],\n    'comma-spacing': 2,\n    'comma-style': 2,\n    'computed-property-spacing': 2,\n    // 'consistent-this': 0,\n    'eol-last': 2,\n    'func-call-spacing': 2,\n    // 'func-name-matching': 0,\n    // 'func-names': 0,\n    // 'func-style': 0,\n    // 'id-blacklist': 0,\n    // 'id-length': 0,\n    // 'id-match': 0,\n    // 'indent': 0, // TODO(philipwalton): this rule isn't compatible with\n                    // Google's 4-space indent for line continuations.\n    // 'jsx-quotes': 0,\n    'key-spacing': 2,\n    'keyword-spacing': 0,\n    // 'line-comment-position': 0,\n    'linebreak-style': 2,\n    // 'lines-around-comment': 0,\n    // 'lines-around-directive': 0,\n    // 'max-depth': 0,\n    'max-len': [2, {\n      code: 80,\n      tabWidth: 2,\n      ignoreUrls: true,\n      ignorePattern: '^goog\\.(module|require)',\n    }],\n    // 'max-lines': 0,\n    // 'max-nested-callbacks': 0,\n    // 'max-params': 0,\n    // 'max-statements-per-line': 0,\n    // 'max-statements': 0,\n    // 'multiline-ternary': 0, // TODO(philipwalton): add a rule to enforce the\n                               // operator appearing at the end of the line.\n    'new-cap': 2,\n    // 'new-parens': 0,\n    // 'newline-after-var': 0,\n    // 'newline-before-return': 0,\n    // 'newline-per-chained-call': 0,\n    'no-array-constructor': 2,\n    // 'no-bitwise': 0,\n    // 'no-continue': 0,\n    // 'no-inline-comments': 0,\n    // 'no-lonely-if': 0,\n    // 'no-mixed-operators': 0,\n    'no-mixed-spaces-and-tabs': 2, // eslint:recommended\n    'no-multiple-empty-lines': [2, {max: 2}],\n    // 'no-negated-condition': 0,\n    // 'no-nested-ternary': 0,\n    'no-new-object': 2,\n    // 'no-plusplus': 0,\n    // 'no-restricted-syntax': 0,\n    // 'no-tabs': 0,\n    // 'no-ternary': 0,\n    'no-trailing-spaces': 2,\n    // 'no-underscore-dangle': 0,\n    // 'no-unneeded-ternary': 0,\n    // 'no-whitespace-before-property': 0,\n    // 'object-curly-newline': 0,\n    'object-curly-spacing': 2,\n    // 'object-property-newline': 0,\n    // 'one-var-declaration-per-line': 0,\n    'one-var': [2, {\n      var: 'never',\n      let: 'never',\n      const: 'never',\n    }],\n    // 'operator-assignment': 0,\n    // 'operator-linebreak': 0,\n    'padded-blocks': [2, 'never'],\n    'quote-props': [2, 'consistent'],\n    'quotes': [2, 'single', {allowTemplateLiterals: true}],\n    'require-jsdoc': [2, {\n      require: {\n        FunctionDeclaration: true,\n        MethodDefinition: true,\n        ClassDeclaration: true,\n      },\n    }],\n    'semi-spacing': 2,\n    'semi': 2,\n    // 'sort-keys': 0,\n    // 'sort-vars': 0,\n    'space-before-blocks': 2,\n    'space-before-function-paren': [2, 'never'],\n    // 'space-in-parens': 0,\n    // 'space-infix-ops': 0,\n    // 'space-unary-ops': 0,\n    'spaced-comment': [2, 'always'],\n    // 'unicode-bom': 0,\n    // 'wrap-regex': 0,\n\n    // ECMAScript 6\n    // http://eslint.org/docs/rules/#ecmascript-6\n    // ------------------------------------------\n    // 'arrow-body-style': 0,\n    'arrow-parens': [2, 'always'], // TODO(philipwalton): technically arrow\n                                   // parens are optional but recommended.\n                                   // ESLint doesn't support a *consistent*\n                                   // setting so \"always\" is used.\n    // 'arrow-spacing': 0,\n    'constructor-super': 2, // eslint:recommended\n    'generator-star-spacing': [2, 'after'],\n    // 'no-class-assign': 0,\n    // 'no-confusing-arrow': 0,\n    // 'no-const-assign': 0, // eslint:recommended\n    // 'no-dupe-class-members': 0, // eslint:recommended\n    // 'no-duplicate-imports': 0,\n    'no-new-symbol': 2, // eslint:recommended\n    // 'no-restricted-imports': 0,\n    'no-this-before-super': 2,  // eslint:recommended\n    // 'no-useless-computed-key': 0,\n    // 'no-useless-constructor': 0,\n    // 'no-useless-rename': 0,\n    'no-var': 2,\n    // 'object-shorthand': 0,\n    // 'prefer-arrow-callback': 0,\n    // 'prefer-const': 0,\n    // 'prefer-numeric-literals': 0,\n    // 'prefer-reflect': 0,\n    'prefer-rest-params': 2,\n    'prefer-spread': 2,\n    // 'prefer-template': 0,\n    // 'require-yield': 2, // eslint:recommended\n    'rest-spread-spacing': 2,\n    // 'sort-imports': 0,\n    // 'symbol-description': 0,\n    // 'template-curly-spacing': 0,\n    'yield-star-spacing': [2, 'after'],\n  },\n};\n"}